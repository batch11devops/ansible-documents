# deploy-tomcat.yml
- name: Deploy Amazon.war to Tomcat
  hosts: webservers
  become: true

  vars_files:
    - vars.yml

  vars:
    tomcat_version: 9.0.89   # <-- This will override the value from vars.yml
    tomcat_user: tomcatinline
    tomcat_group: tomcatgroupinline
    tomcat_tarball_path: "/tmp/tomcat-inline.tar.gz"

  tasks:
    - name: Show variable values (for testing precedence)
      debug:
        msg:
          - "Version: {{ tomcat_version }}"
          - "User: {{ tomcat_user }}"
          - "Group: {{ tomcat_group }}"
          - "Tarball Path: {{ tomcat_tarball_path }}"

    - name: Install Java
      apt:
        name: default-jdk
        state: present
        update_cache: yes

    - name: Install required archive tools and curl
      apt:
        name:
          - tar
          - gzip
          - curl
        state: present

    - name: Create Tomcat group
      group:
        name: "{{ tomcat_group }}"

    - name: Create Tomcat user
      user:
        name: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        shell: /bin/false
        create_home: false

    - name: Download Tomcat using curl
      shell: |
        curl -L -o {{ tomcat_tarball_path }} {{ tomcat_tarball_url }}
      args:
        warn: false

    - name: Create Tomcat installation directory
      file:
        path: "{{ tomcat_install_path }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Extract Tomcat archive
      unarchive:
        src: "{{ tomcat_tarball_path }}"
        dest: "{{ tomcat_install_path }}"
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Change ownership of Tomcat directory
      file:
        path: "{{ tomcat_install_path }}"
        state: directory
        recurse: yes
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"

    - name: Make Tomcat scripts executable
      file:
        path: "{{ tomcat_install_path }}/bin/{{ item }}"
        mode: '0755'
      loop: "{{ tomcat_scripts }}"

    - name: Ensure Amazon.war exists on control node
      stat:
        path: "{{ war_source_path }}"
      register: war_file
      delegate_to: localhost

    - name: Fail if Amazon.war is missing
      fail:
        msg: "Amazon.war not found at {{ war_source_path }}"
      when: not war_file.stat.exists
      delegate_to: localhost

    - name: Ensure Tomcat webapps directory exists
      file:
        path: "{{ tomcat_install_path }}/webapps"
        state: directory
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        mode: '0755'

    - name: Copy Amazon.war from control node to target server
      copy:
        src: "{{ war_source_path }}"
        dest: "{{ tomcat_install_path }}/webapps/Amazon.war"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        mode: '0644'

    - name: Start Tomcat
      shell: "{{ startup_script_path }}"
      args:
        chdir: "{{ tomcat_install_path }}/bin"

